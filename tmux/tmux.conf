# tmux configuration of Fabian "canvon" Pietsch <fabian-config@canvon.de>
# Intended to be symlinked as ~/.tmux.conf for tmux 2.3 (Debian)
#
# Created 2018-05-02 on an attempt to switch from GNU screen to tmux,
# a more modern terminal multiplexer, at least on the local system, for now.
#
# It shall provide most of my previously used screen features, and, after
# an attempt to stay with the black-on-green tmux default status bar
# for a while, should definitely look like screen with my canvon-style
# (caption string /) status bar. That is, white on blue, with bold for
# several things like hostname info, time indication and current window.

# tmux server options.
#
# Try to use tmux-specific $TERM instead of the partially broken "screen".
# This came with my Debian 9 installation, apparently from package ncurses-term.
# When ssh-ing into other systems inside tmux, try "export TERM=screen-256color"
# (or maybe not screen-256color but just screen) as first command, or
# maybe things like bash ^L (clear/redraw screen) or starting/attaching_to
# screen won't work.
set-option -s default-terminal "tmux-256color"

# tmux session options (-g means global default)
#
# Adjust up the time that tmux will display its messages. The default feels
# like the blink of an eye to me, and I certainly can't read that fast.
set-option -g display-time 3000
set-option -g display-panes-time 3000
#
# When thinking multi-session, with frequent C-b ( to switch to another session,
# it's unfortunate to be detached from the still running tmux server
# when closing one session, with other sessions still around... So
# don't do that.
set-option -g detach-on-destroy off
#
# Try a bit to emulate screen's "zombie cr"; at least the part of keeping
# windows/panes around for commands that have already exited.
set-option -g set-remain-on-exit on
#
# Enable mouse mode, one of the things I was interested in tmux for.
# N.B.: Try to use Shift (if your terminal emulator supports it)
#       to temporarily restore the terminal emulator's
#       default mouse behaviour.
# That is, Shift-Left_mouse_drag should copy text,
# Shift-Middle_mouse_click should paste, etc.
#set-option -g mouse on
# Rather than force this on everyone, opt-in (toggle on/off) via key binding:
bind-key F12 set-option -g mouse \; display-message "#{?mouse,mouse mode,NO mouse mode}"
# Some bindings to augment mouse mode:
# Allow pasting with middle mouse click.
# (N.B.: Pastes tmux paste buffer, not what X11 says.)
bind-key -T root MouseDown2Pane if-shell -F -t = "#{mouse_any_flag}" "select-pane -t=; send-keys -M" "select-pane -t=; paste-buffer -p"

# Set outer terminal's hardstatus / X11 window title / ...
set-option -g set-titles on
# (From default to canvon-style.)
#set-option -g set-titles-string "#S:#I:#W - \"#T\" #{session_alerts}"
#set-option -g set-titles-string "#S@#h:#I:#W (has #{window_panes}) - \"#T\" (on #{pane_tty}) #{session_alerts}"
#set-option -g set-titles-string "#S@#h:#I:#W - \"#T\" (on #{pane_tty}) #{session_alerts}"
set-option -g set-titles-string "$USER@#h #S:#I:#W - \"#T\" (on #{pane_tty}) #{session_alerts}"

# Try to take less status bar space when one client is small.
# This does not work fully automatically (as it seems the session_width is unly updated later than the client-detached hook is run?)
# but can be made refresh by C-b r (refresh-client).
set-hook -g client-attached 'if-shell "[ #{session_width} -gt 95 ]" "set-option -g @wide_flag 1" "set-option -g @wide_flag 0"'
set-hook -g client-detached 'if-shell "[ #{session_width} -gt 95 ]" "set-option -g @wide_flag 1" "set-option -g @wide_flag 0"'
set-hook -g client-resized  'if-shell "[ #{session_width} -gt 95 ]" "set-option -g @wide_flag 1" "set-option -g @wide_flag 0"'
set-hook -g before-refresh-client 'if-shell "[ #{session_width} -gt 95 ]" "set-option -g @wide_flag 1" "set-option -g @wide_flag 0"'


#
# Emulate canvon-style screen status bar.
#

# Left end of status bar... Add hostname info and status color-coding.
# (From default to canvon-style.)
#set-option -g status-left "[#S] "
#set-option -g status-left "[#S@#h] "
#set-option -g status-left "#{?client_prefix,#[bg=cyan],}[#S@#h] "
set-option -g status-left "#{?client_prefix,#[bg=cyan],}[#{?@wide_flag,$USER@#h ,}#S] "
# ^ Display USER@HOST info only if the session is wide enough.
#set-option -g status-left-length 10
#set-option -g status-left-length 27
## ^ 10 (7 session name + 3 framing) normally, + 17 (16 hostname + 1 framing) = 27
set-option -g status-left-length 36
# ^ 10 (7 session name + 3 framing) normally, + 17 (16 hostname + 1 framing), + 9 (8 username + 1 framing) = 36

# Right end of status bar... Make the year full-size but optional, add week day.
# (From default to canvon-style.)
#set-option -g status-right " \"#{=21:pane_title}\" %H:%M %d-%b-%y"
#set-option -g status-right-length 40
set-option -g status-right " \"#{=21:pane_title}\" #{?@wide_flag,%Y-,}%m-%d %3a %H:%M"
# ^ Display year only if the session is wide enough.
set-option -g status-right-length 45

# Window info in rest of status bar... Add "Pane is dead" flag, 'D'.
# (From default to canvon-style.)
#set-window-option -g window-status-format         "#I:#W#{?window_flags,#{window_flags}, }"
#set-window-option -g window-status-current-format "#I:#W#{?window_flags,#{window_flags}, }"
set-window-option -g window-status-format         "#I:#W#{?window_flags,#{window_flags}#{?pane_dead,D,},#{?pane_dead,D, }}"
set-window-option -g window-status-current-format "#I:#W#{?window_flags,#{window_flags}#{?pane_dead,D,},#{?pane_dead,D, }}"

# Set up visually like canvon-style screen status bar:
# White on blue, with certain things bold. (See above.)
# (From default to canvon-style.)
#set-option -g status-style fg=black,bg=green
#set-option -g status-left-style default
#set-option -g status-right-style default
set-option -g status-style fg=white,bg=blue
set-option -g -a status-left-style bold
set-option -g -a status-right-style bold
set-window-option -g -a window-status-current-style bold


# Use a base index to avoid having the most left window
# on the most right key on the keyboard...
# Also, it's nice to reserve window number 0 for a "special" thing
# (usually a su to root or something).
set-option -g base-index 1

# Set up keys to work correctly:
# VIM-style for multiple lines of text,
# EMACS-style to edit in a single-line command prompt.
# Also, make Ctrl-Left/-Right work (e.g., for moving word-wise in irssi input).
set-option -g status-keys emacs
set-window-option -g mode-keys vi
set-window-option -g xterm-keys on

# Implement a second third of screen's "zombie cr" functionality:
# Easy process respawning with C-b R (instead of just pressing 'r' in screen,
# but this seems to be acceptable). The missing third would be pressing 'c'
# to easily close the window, but you can do C-b x y for that.
bind-key R respawn-pane
# Also have qwerty-targetted comfort on qwertz (e.g., german keyboard) as well.
# (E.g., instead of C-b AltGr-9 (for ']') it's just C-b + which doesn't need
# any shift or otherwise special keys for entering the '+'.)
bind-key + paste-buffer

# Paste into VIM in paste mode:
bind-key C-] send-keys Escape ":se paste" Enter "a" \; paste-buffer \; send-keys Escape ":se nopaste" Enter "a"

# (This is untested as of 2018-05-05! But it's from the man page.)
# mnemonic: log
bind-key M-l pipe-pane -o 'cat >>~/output.#I-#P'


#
# Bindings to quickly start up things.
#

# SSH into another box.
#bind-key M-s command-prompt -p ssh "new-window -n '%1' 'exec -- ssh %1'"
bind-key M-s command-prompt -p ssh "new-window -n '%1' ssh %1"

# Become root.
# If systemd doesn't have the required feature yet (or the user cancels
# on password prompt), fall back to "su -".
# (If it worked, but the session exits non-zero, machinectl shell
# seems to exit zero all the same, it seems, so no problem there.)
bind-key M-r new-window -n root -t :0 "machinectl shell || su -"
#
# Read email.
# mnemonic: email
set-option -g @email-client mutt
bind-key M-e run-shell "tmux new-window -n email #{@email-client}"
#
# Browse logs.
# mnemonic: journal; (log would conflict with pipe-pane above, syslog would conflict with ssh)
set-option -g @use-journal 0
if-shell "which journalctl >/dev/null" "set-option -g @use-journal 1"
bind-key M-j if-shell -F "#{@use-journal}" "new-window -n journal journalctl -n 1000 -f" "new-window -n syslog less +F /var/log/syslog /var/log/auth.log"
# mnemonic: www
bind-key M-w new-window -n apache "cd /var/log/apache2 && exec -- less +F *.log"
#
# Quickly ssh into the machine running your chat client.
# mnemonic: IRC
set-option -g @irc-host vm-initia
bind-key M-i if-shell "tmux has-session -t main 2>/dev/null" \
  "switch-client -t main ; run-shell \"tmux new-window -t main:1 -n '#{@irc-host}' ssh #{@irc-host} || tmux select-window -t main:1\"" \
  "run-shell \"tmux new-window -n '#{@irc-host}' ssh #{@irc-host}\""
# ^ The upshot of this is that, once session 'main' exists,
#   the target window will be forced to main:1, and if that
#   already exists, simply switch to there.
#
# (This was needed only with screen.)
#bind-key M-s -n ssh ssh-to
#
# (Previous attempt: )
#bind-key M-D new-session -A -s xfer -n dl
#bind-key M-d switch-client -t xfer
# Instead of queueing your file download/upload windows at a certain
# window number as in screen, use another session for that in tmux.
# (Remember you can always easily switch to/from there using C-b (
# or C-b ) .)  Simple lowercase opens first window or switches to there,
# while additionally holding shift creates a new window (if the session
# is already there).
bind-key M-d new-session -A -s xfer -n dl
bind-key M-D switch-client -t xfer \; new-window -t xfer -n dl
#
# Finally, start or switch to our local music player.
# (Reserved window number in the canvon-style main session. See tmux.main.conf)
# mnemonic: music
bind-key M-M switch-client -t main \; new-window -t main:99 cmus
bind-key M-m switch-client -t main \; select-window -t main:99


# Do any local modification (that is not intended to go into config-cvn-pub)
# in the following file: (It's intended to not be an error if the file is missing.)
source-file -q ~/.tmux.local.conf
